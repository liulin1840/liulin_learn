
worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http 
{
    server 
    {
        listen 8080;
        lua_code_cache off;  # 调试关闭缓存
        location / 
        {
            default_type text/html;
            content_by_lua_block {
                ngx.say("<p>hello, xxxxx</p>")
            }
        }

        location /sum 
        {
                # 只允许内部调用
                internal;

                    # 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、
                    # 缓存服务器的操作，达到基础模块和业务逻辑分离目的
                content_by_lua_block {
                            local args = ngx.req.get_uri_args()
                             ngx.say(tonumber(args.a) + tonumber(args.b))
                                            
                }

        }

        location /app/test 
        {
            content_by_lua_block {
                local res = ngx.location.capture(
                        "/sum", {args={a=3, b=8}}                                          
                        )
                        ngx.say("status:", res.status, " response:", res.body)
            }

        }

    }

    lua_package_cpath '/usr/lib64/lua/5.1/luasql/?.so;;';

    server {
        listen 8989;
        lua_code_cache off;  # 调试关闭缓存
        location /test {
            content_by_lua '
                local mysql = require "resty.mysql"
                local db, err = mysql:new()
                if not db then
                    ngx.say("failed to instantiate mysql: ", err)
                    return
                end

                db:set_timeout(1000) -- 1 sec

                local ok, err, errcode, sqlstate = db:connect{
                    host = "127.0.0.1",
                    port = 3306,
                    database = "miaomiao",
                    user = "root",
                    password = "MIAOmiao1988++",
                    charset = "utf8",
                    max_packet_size = 1024 * 1024,
                }

                if not ok then
                    ngx.say("failed to connect: ", err, ": ", errcode, " ", sqlstate)
                    return
                end

                ngx.say("connected to mysql.")

            
                -- run a select query, expected about 10 rows in
                -- the result set:
                res, err, errcode, sqlstate =
                    db:query("select * from cats order by id asc", 10)
                if not res then
                    ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                    return
                end

                local cjson = require "cjson"
                ngx.say("result: ", cjson.encode(res))

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle timeout
                local ok, err = db:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

            ';
        } 

        location /test_wac {
            content_by_lua '
                local mysql = require "luasql.mysql"
                local db          = mysql.mysql()
                local conn        = db:connect("miaomiao","root","MIAOmiao1988++", "127.0.0.1", 3306)

                local cursor, errorMsg  = conn:execute([[select * from cats order by id asc]])

                local row = cursor:fetch ({}, "a")

                while row do
                   ngx.say(string.format("Id: %s, Name: %s", row.id, row.name))
                   row = cursor:fetch (row, "a")
                end

                conn:close();
                db:close();
            ';
        }
    }

    server {
        listen 9000;
        lua_code_cache off;  # 调试关闭缓存
        location /test_redis {
            content_by_lua '
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

            ';
        } 

        location /test_old_redis {
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)
                -- or just close the connection right away:
                local ok, err = red:close()
                if not ok then
                    ngx.say("failed to close: ", err)
                     return
                end
            }
        }
    }
}
